
.FK ->		Lexer ->      Parser
Source Code	Tokens	       AST
		     	 /------|-----\
			/              \
		      Interp->Symbols->	Typer
		      Pass 1		Pass 2
		     Checking          Manages Backend
					/
				       /
				      /
				    LLVM, ASM, C(?) etc.


Ideas:
Test test test
yo!

variable declarations:
p1 := 2;
p1 : int = p;
p2 : int = 2;

type/routine declarations:

main :: (p1: int, p2: int) -> int {}
main :: () {}
main :: () -> int {}
Point :: struct {}

routine calls:
main(args, args);

control statements:
if x < 2 {}
while (x < 2) {}
for (x) {} / for (0..4) {} / for (0..x<2) {}

for (int i = 0; i < 4; i++) {}
for (3) {} maybe
for (0..4); i think is more clear

decl_test :: () -> int
{
	x : int = 2;
	y : int;
	z := x + y * x;
	return z;s
}
control_test :: (yo: int)
{
	for (0..4) {
		x++;
	}
}

For now:

p : int = 2;
p := 2 (does int only)

if p <= 2 {
  p = p + 1;
}

*/